
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Commands for Saving Changes =-=-=-=-=-=-=-=-=-=-=-=-=-=-= (Local -> Github)
-----------------------------------------------------------------------------------------
-> So, now on you are aware about how to 'clone' a github Repo on your local system and perform your changes.
-> But did it changed on both local(Computer) and Remote(Github) file ?
-> The Answer is No! any changes performed on the "clone" file doen't reflect on the main file on Github repo.


              Github Repo 
         _______________________
         |      Main File       |
         |______________________|                   Local Computer
                    |                           _____________________ 
                    |___________________________|   Clone file      |
                                                |___________________|
                                          (Any change in the clone file)
                                          (doesn,t affect the main file)



::::::::: But! How to reflect changes? ::::::::::::::::::::
-----------------------------------------------------------
-> The answer is if you perform any changes at your clone file then the changes gets 'Untracked'
   means that no one know about what changes you performed on the file.
-> If you wants to reflect changes at the main file on github that you have to 'Commit' the changes.


----------------------------------
:::: It is a two step process :::
-----------------------------------

        _____________________                                                                                 _____________
        |   Changed Code    |-----------> [Add file to stage] ---------------> [Commit with msg] -----------> | Main file |
        |___________________|                                                                                 |___________|
            Clone file                                                                                            Github



::::::::::::::: Example ::::::::::::::::::
-------------------------------------------------------------------------------------------------------------------------
-> Suppose there is a wedding where every couple wants to click their photograph to keep a proper record.
-> So before clicking pictures everyone comes at the stage one by one and then the photographer click their picture as record.
-> This example is exactly like used in the git where, 

   _______________________________________________________________
   |                                                             |
   |     ( Unclicked couples) --------> Untracked files          |
   |     ( Comes at stage   ) --------> git add <fileName>       |
   |     ( Clicking picture ) --------> git commit -m <message>  |
   |_____________________________________________________________|

-------------------------------------------------------------------------------------------------------------------------



==============================
(1) git status
------------------------------
-> This command is used to show the current status of our changes performed in file. 
-> If the status is untracked then we have to commit those files.


=========================================================================
|    status          |      Description                                 |
|____________________|__________________________________________________|
| Nothing to commit  | Local file is same as the Github file            |
|____________________|__________________________________________________|
| Untracked          | Local file is changed and needs to be commit     |
|____________________|__________________________________________________|




==============================
(2) git add <fileName>  
------------------------------
-> This command is used to move untracked files to add in the queue (Stage)
-> use (.) dot instead of filename to add all the untracked files at ones. 



==============================
(3) git commit -m <message>
------------------------------
-> This command is used to move all the untracked files at stage into Tracked file on Github Repo.
-> Save all the changes from (clone file) --> (github file)



------------------------------
(4) git log
 ------------------------------
-> This command is used to display all the history stored in the .git folder




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Commands for Restore file =-=-=-=-=-=-=-=-=-=-=-=-=-=-= (Local <- Github)
-----------------------------------------------------------------------------------------

-> Now, we already done with understanding how to 'stage changes' , 'commit changes' , 'Display the history' but 
   what if we wants to move back in the past.

-> Suppose we chnages our code alot with proper history maintainded but now we wants to reverse the changes.

-> In that case these commands are used : 




------------------------------
(4) git restore --staged <fileName>
------------------------------
-> This command is used to restore the file that comes at the stage (add) using command 'git add fileName'
   by mistake and we don't wants to save it at main level.





------------------------------
(1) git restore <history hash code>
 ------------------------------
-> This command is used to reverse the history at a particular has code.
-> hash code will be available at the history section of the git.



------------------------------
(2) git stash
 ------------------------------
-> This command is used when we are having some chnages at the stage level.
-> And we wants to save those changes somewhere other than commit to the main file.
-> for example those guest whom are late but still with no photograph clicked (Untracked) wanting at the backstage 
   so that other working can be done as normal. 
-> And whenever we wants to make those changes available we can call them on stage and commit.
-> git stash command hold those changes at the 'backstage'



------------------------------
(2) git pop
 ------------------------------
-> This command is used to make those changes present at the back stage to come on the stage.
-> And then we can simple commit those changes.
